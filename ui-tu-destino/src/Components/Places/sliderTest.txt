function ImgSlider({url,altIndex,title,onHover, isHovered}) {
  const [isView,setIsView] =useState(false)
  const searchPlace=()=>{
    // Logica para buscar el lugar 
    // Requiere conexion a backend
}
const view=()=>{
  onHover()
  setIsView(false)
}

const leave=()=>{
  setIsView(true)
}
  return(<>
   <img onMouseEnter={view}

    className="w-[400px] h-[350px] object-cover hover:bg-transparent/50" src={url} alt={`imagen ${altIndex}`} />
    {isHovered != isView && (
      <div onMouseLeave={leave} className="absolute inset-0 flex flex-col items-center justify-center">
        <h2>{title}</h2>
          <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugit voluptatum soluta cumque! Laudantium reprehenderit nostrum minus atque officia culpa aut? Est molestias quaerat quisquam fugiat!</p>
    </div>
    )}
   
    </>
  )
  
}




function Slider({ images }) {
	// Variables y Estados
	const [imagenActual, setImagenActual] = useState(0);
	const cantidad = images?.length;
  const [hoveredIndex, setHoveredIndex] = useState(null);
	// Return prematuro para evitar errores
	if (!Array.isArray(images) || cantidad === 0) return <h1>verifivcar</h1>;

	const siguienteImagen = () => {
		setImagenActual(imagenActual === cantidad - 1 ? 0 : imagenActual + 1);
	};

	const anteriorImagen = () => {
		setImagenActual(imagenActual === 0 ? cantidad - 1 : imagenActual - 1);
	};

  const handleHover = (index) => {
    setHoveredIndex(index);
    console.log(index);
    
  };
	return (
		<div className='w-11/12 h-[80%] flex items-center justify-center bg-slate-500  rounded shadow-lg'>
			<button className="h-2/4 w-[2%] bg-white rounded-2xl" onClick={anteriorImagen}>←</button>

			<div className="flex items-center justify-center w-[96%] ">
      {images.map((imagen, index) => {
				const isVisible = 
					index === imagenActual || 
					index === (imagenActual + 1) % cantidad || 
					index === (imagenActual + 2) % cantidad ||
          index === (imagenActual + 3) % cantidad;

				return (
					<div
						key={index}
						className={`h-full relative
              ${isVisible
								? `${'slider'} ${'active'}`
								: 'slide' }
              `
						}>
						{isVisible && (
						<ImgSlider url={imagen.img} altIndex={index} title={imagen.name}
            onHover={() => handleHover(index)}
            isHovered={hoveredIndex === index}
            />
						)}
					</div>
				);
			})}
      </div>

			<button className="h-2/4 w-[2%] bg-white rounded-2xl" onClick={siguienteImagen}>→</button>
		</div>
	);
}
